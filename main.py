
import logging
from aiogram import Bot, Dispatcher, executor, types
logging.basicConfig(level=logging.INFO)
from db import Database
import functions as fc
from keyboards import kb_client

from config import TOKEN, ADMIN

bot = Bot(TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)
db = Database('database.db')

@dp.message_handler(commands=['start'])
async def start(message : types.Message):
    try:
        await bot.send_message(message.from_user.id, '–≠—Ç–æ —á–∞—Ç-–±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –û–û–û –ú–¢–ö "–¢–µ—Ö–Ω–æ–°–æ—Ñ—Ç"üíª\nüî≤ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üî≤.\nüí¨ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã üí¨.\n<b>--------------- –ù–∞–ø—Ä–∏–º–µ—Ä ---------------</b>\nüìû <em>"–ö–∞–∫ —è –º–æ–≥—É —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è ?"</em> üìû\nüìö <em>"–û –∫–æ–º–ø–∞–Ω–∏–∏/–û–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"</em> üìö', parse_mode="HTML", reply_markup=kb_client)
        await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É:\nhttps://t.me/tgtechsoftsupport_bot')


@dp.message_handler(commands=['–†–µ–∂–∏–º_—Ä–∞–±–æ—Ç—ã'])
async def tech_open_command(message : types.Message):
    await bot.send_message(message.from_user.id, '–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: <b>—Å 9:00 –¥–æ 18:00</b>', parse_mode="HTML")

@dp.message_handler(commands=['–ê–¥—Ä–µ—Å'])
async def tech_place_command(message: types.Message):
    await bot.send_message(message.from_user.id, '<b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å:</b> 129626, –ì.–ú–æ—Å–∫–≤–∞, –≤–Ω.—Ç–µ—Ä.–≥. –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –û–∫—Ä—É–≥ –ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∏–π, –ø—Ä-–∫—Ç –ú–∏—Ä–∞, –¥.102, –∫.1', parse_mode="HTML")

@dp.message_handler(commands=['send'])
async def send_user(message : types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>!')

@dp.message_handler()
async def mess(message : types.Message):
    try:
        answer_id = fc.recognize_questions(message.text, db.get_questions())
        await bot.send_message(message.from_user.id, db.get_answer(answer_id))
    except:
        await message.reply('<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ –ë–î.</b>\n<b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ –ø–æ–≤–æ–¥—É –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.</b>', parse_mode="HTML")


@dp.message_handler(content_types=['any'])
async def p2p_handler(message : types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == ADMIN:
            if not message.reply_to_message:
                return

            await  bot.forward_message(message.reply_to_message.forward_from_message_id, message.chat.id, message.message_id)


        else:
            await  bot.forward_message(ADMIN, message.chat.id, message.message_id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

    def register_handlers_client(dp: Dispatcher):
        dp.register_message_handler(start, commands=['start'])
        dp.register_message_handler(tech_open_command, commands=['–†–µ–∂–∏–º_—Ä–∞–±–æ—Ç—ã'])
        dp.register_message_handler(tech_place_command, commands=['–ê–¥—Ä–µ—Å'])